#!/bin/sh
#
# dot
#
# `dot` handles installation, updates, things like that. Run it periodically
# to make sure you're on the latest and greatest.

set -e

parentDirectory="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd -P)"
dotfilesDirectory="$(cd "$( dirname "$parentDirectory" )" && pwd -P)"

displayUsageAndExit() {
	echo "dot -- dotfiles management"
	echo ""
	echo "Usage: dot [options]"
	echo ""
	echo "Options:"
	echo "  -e, --edit    Open dotfiles directory for editing"
	echo "  -h, --help    Show this help message and exit"
	exit
}

while test $# -gt 0; do
	case "$1" in
		"-h"|"--help")
			displayUsageAndExit
			;;
		"-e"|"--edit")
			exec "$EDITOR" "$dotfilesDirectory"
			exit
			;;
		*)
			echo "Invalid option: $1"
			displayUsageAndExit
			;;
	esac
	shift
done

export ZSH=$HOME/.dotfiles

# Set macOS defaults
$ZSH/macos/set-defaults.sh

# Install homebrew
$ZSH/homebrew/install.sh 2>&1

# Upgrade homebrew
echo "› brew update"
brew update

# Upgrade outdated packages
echo "› brew upgrade"
brew upgrade

# Mac Apple Store Upgrade
echo "› mas upgrade"
mas upgrade

# brew bundle
echo "› brew bundle"
brew bundle install --file="$dotfilesDirectory/Brewfile"

# Update Node.js and npm in a subshell to isolate any issues
echo "› Updating Node.js and npm"
(
	# Disable NVM auto-use completely
	export NVM_AUTO_USE=false
	
	# Source the existing NVM configuration
	if [ -f "$ZSH/node/path.zsh" ]; then
		echo "Sourcing existing NVM configuration"
		source "$ZSH/node/path.zsh" || echo "Failed to source NVM configuration"
		
		# Check if NVM is available
		if command -v nvm &> /dev/null; then
			# Install Node.js 20.17.0 explicitly
			echo "Using NVM to install Node.js 20.17.0"
			nvm install 20.17.0 || echo "Failed to install Node.js 20.17.0"
			
			# Explicitly use this version (no auto-use)
			nvm use 20.17.0 || {
				echo "Failed to use Node.js 20.17.0, trying to install LTS version"
				nvm install --lts
				nvm use --lts || echo "Failed to use LTS version, continuing with system Node.js"
			}
			
			# Verify Node.js is available
			if command -v node &> /dev/null; then
				echo "Node.js version: $(node -v)"
				
				# Now update npm with the compatible Node.js version
				echo "› npm upgrade"
				npm install -g npm@latest --no-fund || echo "Failed to update npm"

				# Remove Angular CLI as it's no longer needed
				npm uninstall -g @angular/cli 2>/dev/null || true
				
				# Get list of outdated packages
				echo "› Checking for outdated global npm packages"
				OUTDATED_PACKAGES=$(npm outdated -g --parseable 2>/dev/null || echo "")
				
				if [ -n "$OUTDATED_PACKAGES" ]; then
					echo "› Installing latest versions of outdated global npm packages"
					# Extract package names from outdated packages list
					PACKAGE_NAMES=$(echo "$OUTDATED_PACKAGES" | awk -F: '{print $4}' | sort -u)
					echo "Packages to update: $PACKAGE_NAMES"
					
					# Install latest version of each outdated package
					for package in $PACKAGE_NAMES; do
						echo "  Updating $package to latest version"
						npm install -g "$package@latest" --no-fund --silent || echo "Failed to update $package"
					done
				else
					echo "› All global npm packages are up to date"
				fi
				
				# Run npm audit fix but don't show warnings about deprecated packages
				echo "› Running npm audit fix"
				npm audit fix --force --no-fund --silent || echo "npm audit fix had issues"
				echo "Node.js and npm update completed"
			else
				echo "Node.js is not available after NVM setup. Something went wrong."
			fi
		else
			echo "NVM not properly loaded. Running node/install.sh to set up NVM"
			"$ZSH/node/install.sh" || echo "Failed to run node/install.sh"
		fi
	else
		echo "NVM configuration not found. Running node/install.sh to set up NVM"
		"$ZSH/node/install.sh" || echo "Failed to run node/install.sh"
	fi
	
	exit 0  # Force successful exit from subshell
) || echo "Node.js update had some issues, continuing with installation"

echo "› Starting post-install scripts"
# Install software
echo "› Running post-install scripts from $ZSH/script/install"
"$ZSH/script/install" || echo "Warning: Some post-install scripts failed"

echo ""
echo "┌────────────────────────────────────────────┐"
echo "│ dot script completed successfully!         │"
echo "│ Your system is now up-to-date.             │"
echo "└────────────────────────────────────────────┘"
