#!/bin/bash
#
# check-updates
#
# Check for updates to the dotfiles repository and dependencies

set -euo pipefail

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the dotfiles directory
DOTFILES_DIR="$HOME/.dotfiles"

# Check if the dotfiles directory exists
if [ ! -d "$DOTFILES_DIR" ]; then
  echo -e "${RED}Error: Dotfiles directory not found at $DOTFILES_DIR${NC}"
  exit 1
fi

# Source the shared status library
if [ -f "$DOTFILES_DIR/lib/status.sh" ]; then
  source "$DOTFILES_DIR/lib/status.sh"
else
  echo -e "${YELLOW}Warning: Status library not found at $DOTFILES_DIR/lib/status.sh${NC}"
  echo -e "${YELLOW}Some status features may not work properly${NC}"
  # Define stub functions to prevent errors
  status_exists() { return 1; }
  status_clear() { :; }
  status_update() { :; }
fi

# Change to the dotfiles directory
cd "$DOTFILES_DIR"

# Check if git is installed
if ! command -v git &> /dev/null; then
  echo -e "${RED}Error: git is not installed${NC}"
  exit 1
fi

# Check if the directory is a git repository
if [ ! -d ".git" ]; then
  echo -e "${RED}Error: $DOTFILES_DIR is not a git repository${NC}"
  exit 1
fi

echo -e "${BLUE}=== Checking for dotfiles updates ===${NC}"

# Fetch the latest changes without merging
git fetch origin --quiet

# Check if there are any changes
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

DOTFILES_UPDATED=false

if [ $LOCAL = $REMOTE ]; then
  echo -e "${GREEN}Your dotfiles are up to date!${NC}"
elif [ $LOCAL = $BASE ]; then
  # Count the number of commits behind
  COMMITS_BEHIND=$(git rev-list --count HEAD..@{u})

  echo -e "${YELLOW}Your dotfiles are behind by $COMMITS_BEHIND commit(s).${NC}"
  echo -e "${YELLOW}Run 'cd $DOTFILES_DIR && git pull' to update.${NC}"

  # Show a summary of the changes
  echo -e "\n${GREEN}Summary of changes:${NC}"
  git log --oneline --pretty=format:"%h %s" HEAD..@{u} | head -n 5

  # If there are more than 5 commits, show a message
  if [ $COMMITS_BEHIND -gt 5 ]; then
    echo -e "${YELLOW}... and $(($COMMITS_BEHIND - 5)) more commit(s)${NC}"
  fi

  echo -e "\n${YELLOW}Would you like to update your dotfiles now? (y/n)${NC}"
  read -r response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    git pull
    echo -e "${GREEN}Dotfiles updated successfully!${NC}"
    DOTFILES_UPDATED=true
  else
    echo -e "${YELLOW}Dotfiles update skipped.${NC}"
  fi
elif [ $REMOTE = $BASE ]; then
  echo -e "${YELLOW}Your dotfiles have local changes that haven't been pushed.${NC}"
  echo -e "${YELLOW}Run 'cd $DOTFILES_DIR && git push' to push your changes.${NC}"
else
  echo -e "${RED}Your dotfiles have diverged from the remote repository.${NC}"
  echo -e "${RED}You may need to resolve conflicts manually.${NC}"
  echo -e "${RED}Run 'cd $DOTFILES_DIR && git status' for more information.${NC}"
fi

# Check for outdated dependencies
echo -e "\n${BLUE}=== Checking for outdated dependencies ===${NC}"

# Check if Homebrew is installed
if command -v brew &> /dev/null; then
  echo -e "${GREEN}Checking for outdated Homebrew packages...${NC}"

  # Update Homebrew formulae
  brew update > /dev/null

  # Get outdated packages
  OUTDATED_PACKAGES=$(brew outdated)
  BREW_OUTDATED=false

  if [ -z "$OUTDATED_PACKAGES" ]; then
    echo -e "${GREEN}All Homebrew packages are up to date!${NC}"

    # Clear the status file if it exists and contains brew updates
    if status_exists "brew"; then
      echo -e "${GREEN}Clearing previous brew update status${NC}"
      status_clear
    fi
  else
    echo -e "${YELLOW}The following Homebrew packages are outdated:${NC}"
    echo "$OUTDATED_PACKAGES"
    BREW_OUTDATED=true

    # Count the number of outdated packages
    OUTDATED_COUNT=$(echo "$OUTDATED_PACKAGES" | wc -l | tr -d ' ')

    # Update the status file
    status_update "brew" "Homebrew updates available ($OUTDATED_COUNT packages)"
  fi
else
  echo -e "${YELLOW}Homebrew is not installed. Skipping package check.${NC}"
fi

# Check for outdated npm packages if Node.js is installed
if command -v npm &> /dev/null; then
  echo -e "\n${GREEN}Checking for outdated global npm packages...${NC}"

  # Load NVM if available to ensure we're using the same Node.js environment as bin/dot
  export NVM_DIR="$HOME/.nvm"
  export NVM_AUTO_USE=false

  # Try to load NVM for npm package checking
  echo -e "${GREEN}Loading NVM environment...${NC}"
  
  # Simple approach: try to load NVM, but don't fail if it doesn't work
  if [ -s "$NVM_DIR/nvm.sh" ]; then
    # Temporarily disable all strict modes for NVM loading
    set +euo pipefail
    source "$NVM_DIR/nvm.sh" > /dev/null 2>&1 || true
    [ -s "$NVM_DIR/bash_completion" ] && source "$NVM_DIR/bash_completion" > /dev/null 2>&1 || true
    # Re-enable strict modes
    set -euo pipefail
    
    # Try to use a Node.js version if NVM loaded
    if command -v nvm &> /dev/null; then
      nvm use --lts --silent > /dev/null 2>&1 || nvm use node --silent > /dev/null 2>&1 || true
    fi
  fi
  
  # Check if we have node available for npm checking
  if command -v node &> /dev/null; then
    echo -e "${GREEN}Using Node.js $(node -v) for package check${NC}"
  else
    echo -e "${YELLOW}Node.js not available, skipping npm package check${NC}"
    echo -e "\n${GREEN}Update check completed!${NC}"
    return 0
  fi

  echo -e "${BLUE}==>${NC} Checking npm packages (this may take a moment)..."

  # Create a temporary directory for our work
  TEMP_DIR=$(mktemp -d)

  # Get list of globally installed packages
  npm list -g --depth=0 --json > "$TEMP_DIR/installed.json" 2>/dev/null

  # Check if we got valid JSON
  if jq -e . "$TEMP_DIR/installed.json" >/dev/null 2>&1; then
    # Extract package names and versions
    jq -r '.dependencies | to_entries[] | "\(.key)@\(.value.version)"' "$TEMP_DIR/installed.json" > "$TEMP_DIR/installed_packages.txt"

    # Initialize outdated packages array
    OUTDATED_PACKAGES=()
    HAS_OUTDATED=false

    # Check each package individually
    while IFS= read -r package_info; do
      # Handle scoped packages correctly by finding the last @ symbol
      package_name=$(echo "$package_info" | sed 's/@\([^@]*\)$//' | sed 's/^@//')
      current_version=$(echo "$package_info" | sed 's/.*@\([^@]*\)$/\1/')

      # For scoped packages, add the @ back
      if [[ "$package_info" == @* ]]; then
        package_name="@$package_name"
      fi

      # Skip npm itself as it's handled separately
      if [ "$package_name" = "npm" ]; then
        continue
      fi

      # Try to get the latest version
      latest_version=$(npm view "$package_name" version 2>/dev/null)

      if [ -n "$latest_version" ] && [ "$current_version" != "$latest_version" ]; then
        OUTDATED_PACKAGES+=("$package_name@$current_version â†’ $latest_version")
        HAS_OUTDATED=true
      fi
    done < "$TEMP_DIR/installed_packages.txt"

    # Check if we found any outdated packages
    if [ "$HAS_OUTDATED" = true ]; then
      echo -e "${YELLOW}You have outdated global npm packages:${NC}"
      for pkg in "${OUTDATED_PACKAGES[@]}"; do
        echo "  $pkg"
      done
      OUTDATED_NPM="yes"

      # Update the status file
      status_update "npm" "npm updates available"
    else
      echo -e "${GREEN}All global npm packages are up to date!${NC}"
      OUTDATED_NPM=""

      # Clear the status file if it exists and contains npm updates
      if status_exists "npm"; then
        echo -e "${GREEN}Clearing previous npm update status${NC}"
        status_clear
      fi
    fi
  else
    echo -e "${YELLOW}Could not parse npm package information. Try running 'npm outdated -g' manually.${NC}"
    OUTDATED_NPM="unknown"
  fi

  # Clean up
  rm -rf "$TEMP_DIR"
else
  echo -e "${YELLOW}Node.js/npm is not installed. Skipping npm package check.${NC}"
fi

# Ask if user wants to run bin/dot to update dependencies
if [ "$DOTFILES_UPDATED" = true ] || [ "$BREW_OUTDATED" = true ] || [ ! -z "$OUTDATED_NPM" ]; then
  echo -e "\n${YELLOW}Would you like to run bin/dot to update your dependencies? (y/n)${NC}"
  read -r response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
    echo -e "${GREEN}Running bin/dot...${NC}"
    "$DOTFILES_DIR/bin/dot"
    echo -e "${GREEN}bin/dot completed successfully!${NC}"
  else
    echo -e "${YELLOW}bin/dot skipped. You can run it manually with 'bin/dot'.${NC}"
  fi
fi

echo -e "\n${GREEN}Update check completed!${NC}"
